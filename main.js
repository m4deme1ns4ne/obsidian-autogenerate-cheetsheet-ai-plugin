/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CheatsheetGeneratorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_util = require("util");
var import_fs = require("fs");
var import_os = require("os");
var import_path = require("path");
var execPromise = (0, import_util.promisify)(import_child_process.exec);
var CheatsheetGeneratorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "generate-cheatsheet",
      name: "Generate Cheatsheet",
      callback: () => {
        new CheatsheetModal(this.app, async (topic) => {
          await this.generateCheatsheet(topic);
        }).open();
      }
    });
  }
  async generateCheatsheet(topic) {
    const progressModal = new ProgressModal(this.app, topic);
    progressModal.open();
    try {
      new import_obsidian.Notice(`Generating cheatsheet for topic: ${topic}...`);
      console.log("Starting generation for topic:", topic);
      const command = `cd "/Users/aleksandrvolzanin/Machine learning/.obsidian/plugins/extension_ai_obsidian" && source ".venv/bin/activate" && python3 main.py "${topic}"`;
      console.log("Executing command:", command);
      const { stdout, stderr } = await execPromise(command);
      console.log("Python script output:", stdout);
      console.log("Python script errors:", stderr);
      if (stderr) {
        console.error(`Error: ${stderr}`);
        new import_obsidian.Notice(`Error generating cheatsheet: ${stderr}`);
        progressModal.close();
        return;
      }
      if (!stdout) {
        console.error("No output from Python script");
        new import_obsidian.Notice("Failed to generate cheatsheet: No output received");
        progressModal.close();
        return;
      }
      progressModal.close();
      new EditCheatsheetModal(this.app, stdout, async (content) => {
        await this.saveCheatsheet(topic, content);
      }).open();
    } catch (error) {
      console.error(`Failed to generate cheatsheet:`, error);
      new import_obsidian.Notice(
        `Failed to generate cheatsheet: ${error.message || "Unknown error"}`
      );
      progressModal.close();
    }
  }
  async saveCheatsheet(topic, content) {
    const progressModal = new ProgressModal(this.app, "Saving cheatsheet...");
    progressModal.open();
    try {
      console.log("Saving cheatsheet for topic:", topic);
      const tmpFilePath = (0, import_path.join)((0, import_os.tmpdir)(), `cheatsheet_${Date.now()}.md`);
      (0, import_fs.writeFileSync)(tmpFilePath, content, "utf-8");
      const command = `cd "/Users/aleksandrvolzanin/Machine learning/.obsidian/plugins/extension_ai_obsidian" && source ".venv/bin/activate" && python3 main.py "${topic}" "${tmpFilePath}"`;
      console.log("Executing save command:", command);
      const { stdout, stderr } = await execPromise(command);
      console.log("Save script output:", stdout);
      console.log("Save script errors:", stderr);
      if (stderr) {
        console.error(`Error: ${stderr}`);
        new import_obsidian.Notice(`Error saving cheatsheet: ${stderr}`);
        progressModal.close();
        return;
      }
      progressModal.close();
      new import_obsidian.Notice(`Cheatsheet for "${topic}" saved successfully!`);
    } catch (error) {
      console.error(`Failed to save cheatsheet:`, error);
      new import_obsidian.Notice(
        `Failed to save cheatsheet: ${error.message || "Unknown error"}`
      );
      progressModal.close();
    }
  }
  onunload() {
  }
};
var CheatsheetModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.topic = "";
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Generate Cheatsheet" });
    contentEl.createEl("p", { text: "Enter the topic for your cheatsheet:" });
    const input = new import_obsidian.TextComponent(contentEl);
    input.setPlaceholder("e.g., Linear Regression").onChange((value) => {
      this.topic = value;
    });
    const button = contentEl.createEl("button", { text: "Generate" });
    button.style.marginTop = "10px";
    button.addEventListener("click", () => {
      if (this.topic.trim() === "") {
        new import_obsidian.Notice("Please enter a topic.");
        return;
      }
      this.onSubmit(this.topic);
      this.close();
    });
    input.inputEl.addEventListener("keypress", (e) => {
      if (e.key === "Enter" && this.topic.trim() !== "") {
        this.onSubmit(this.topic);
        this.close();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MarkdownPreviewComponent = class extends import_obsidian.Component {
  constructor(app) {
    super();
    this.app = app;
  }
};
var EditCheatsheetModal = class extends import_obsidian.Modal {
  constructor(app, content, onSubmit) {
    super(app);
    this.content = content;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    this.modalEl.style.width = "90vw";
    this.modalEl.style.height = "90vh";
    this.modalEl.style.maxWidth = "1500px";
    this.modalEl.addClass("stylish-modal");
    const styleEl = document.createElement("style");
    styleEl.textContent = `
      .stylish-modal {
        border: none !important;
        border-radius: 12px !important;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2) !important;
        background-color: var(--background-primary) !important;
      }
      
      .stylish-modal .modal-close-button {
        color: var(--text-normal) !important;
        top: 14px !important;
        right: 14px !important;
      }
      
      .stylish-modal .modal-content {
        padding: 0 !important;
      }
      
      .editor-preview-split {
        border-radius: 8px !important;
        overflow: hidden !important;
      }
      
      .editor-panel, .preview-panel {
        background-color: var(--background-secondary) !important;
        border-radius: 8px !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
      }
      
      .preview-panel {
        background-color: var(--background-secondary-alt) !important;
      }
      
      .panel-header {
        font-size: 16px !important;
        font-weight: 600 !important;
        color: var(--text-normal) !important;
        padding: 12px !important;
        margin: 0 !important;
        background-color: var(--background-secondary-alt) !important;
        border-bottom: 1px solid var(--background-modifier-border) !important;
        border-radius: 8px 8px 0 0 !important;
      }
      
      .stylish-modal button {
        background-color: var(--interactive-accent) !important;
        color: var(--text-on-accent) !important;
        border: none !important;
        border-radius: 6px !important;
        padding: 8px 16px !important;
        font-weight: 600 !important;
        transition: background-color 0.2s ease !important;
      }
      
      .stylish-modal button:hover {
        background-color: var(--interactive-accent-hover) !important;
      }
      
      .stylish-textarea {
        border: none !important;
        background-color: var(--background-primary) !important;
        resize: none !important;
        font-family: var(--font-monospace) !important;
        padding: 12px !important;
        border-radius: 0 0 8px 8px !important;
      }
    `;
    document.head.appendChild(styleEl);
    const container = contentEl.createDiv({
      attr: {
        style: "display: flex; flex-direction: column; width: 100%; height: 100%; padding: 20px;"
      }
    });
    container.createEl("h2", {
      text: "Edit Cheatsheet",
      attr: {
        style: "margin: 0 0 20px 0; font-size: 24px; color: var(--text-normal);"
      }
    });
    const splitContainer = container.createDiv({
      attr: {
        style: "display: flex; width: 100%; height: 100%; gap: 20px;",
        class: "editor-preview-split"
      }
    });
    const editorContainer = splitContainer.createDiv({
      attr: {
        style: "flex: 1; display: flex; flex-direction: column;",
        class: "editor-panel"
      }
    });
    const previewContainer = splitContainer.createDiv({
      attr: {
        style: "flex: 1; display: flex; flex-direction: column;",
        class: "preview-panel"
      }
    });
    editorContainer.createEl("h3", {
      text: "\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440",
      attr: {
        style: "margin: 0;",
        class: "panel-header"
      }
    });
    previewContainer.createEl("h3", {
      text: "\u041F\u0440\u0435\u0434\u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440",
      attr: {
        style: "margin: 0;",
        class: "panel-header"
      }
    });
    this.textarea = editorContainer.createEl("textarea", {
      attr: {
        style: "width: 100%; height: 100%; margin: 0;",
        class: "stylish-textarea"
      }
    });
    this.textarea.value = this.content;
    this.previewEl = previewContainer.createDiv({
      attr: {
        style: "height: 100%; padding: 20px; overflow-y: auto;"
      }
    });
    this.textarea.addEventListener("input", () => {
      this.updatePreview();
    });
    this.updatePreview();
    const buttonContainer = contentEl.createDiv({
      attr: {
        style: "display: flex; justify-content: flex-end; margin-top: 20px;"
      }
    });
    const button = buttonContainer.createEl("button", { text: "Save" });
    button.addEventListener("click", () => {
      this.onSubmit(this.textarea.value);
      this.close();
    });
  }
  updatePreview() {
    this.previewEl.empty();
    import_obsidian.MarkdownRenderer.renderMarkdown(
      this.textarea.value,
      this.previewEl,
      "",
      new MarkdownPreviewComponent(this.app)
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    const styleEl = document.querySelector("style:contains(.stylish-modal)");
    if (styleEl) {
      styleEl.remove();
    }
  }
};
var ProgressModal = class extends import_obsidian.Modal {
  constructor(app, message) {
    super(app);
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Generating Cheatsheet" });
    const progressContainer = contentEl.createDiv({
      attr: {
        style: "display: flex; flex-direction: column; align-items: center; justify-content: center; margin: 20px 0;"
      }
    });
    const spinner = progressContainer.createDiv({
      attr: {
        style: "width: 50px; height: 50px; border: 5px solid #f3f3f3; border-top: 5px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite; margin: 20px 0;"
      }
    });
    const style = document.createElement("style");
    style.textContent = `
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
    progressContainer.createEl("p", {
      text: this.message,
      attr: {
        style: "text-align: center; margin: 10px 0;"
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
